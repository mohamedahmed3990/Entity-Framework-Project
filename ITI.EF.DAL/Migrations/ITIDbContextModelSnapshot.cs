// <auto-generated />
using System;
using EntityFrameworkLab2.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ITI.EF.DAL.Migrations
{
    [DbContext(typeof(ITIDbContext))]
    partial class ITIDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ITI.EF.DAL.Models.Course", b =>
                {
                    b.Property<int>("Crs_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Crs_Id"), 100L, 100);

                    b.Property<int>("Crs_Duration")
                        .HasColumnType("int");

                    b.Property<string>("Crs_Name")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("Crs_Id");

                    b.HasIndex("TopicId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Crs_Id = 100,
                            Crs_Duration = 4,
                            Crs_Name = "OOP"
                        },
                        new
                        {
                            Crs_Id = 200,
                            Crs_Duration = 5,
                            Crs_Name = "C#"
                        },
                        new
                        {
                            Crs_Id = 300,
                            Crs_Duration = 5,
                            Crs_Name = "Java"
                        },
                        new
                        {
                            Crs_Id = 400,
                            Crs_Duration = 3,
                            Crs_Name = "SqlServer"
                        });
                });

            modelBuilder.Entity("ITI.EF.DAL.Models.Department", b =>
                {
                    b.Property<int>("DeptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeptId"), 10L, 10);

                    b.Property<string>("DeptDesc")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DeptLocation")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DeptName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.HasKey("DeptId");

                    b.HasIndex("ManagerId")
                        .IsUnique()
                        .HasFilter("[ManagerId] IS NOT NULL");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DeptId = 1,
                            DeptDesc = "cairo",
                            DeptName = "SD"
                        },
                        new
                        {
                            DeptId = 2,
                            DeptDesc = "Designer",
                            DeptName = "UI&UX"
                        },
                        new
                        {
                            DeptId = 3,
                            DeptLocation = "Alex",
                            DeptName = "Network"
                        },
                        new
                        {
                            DeptId = 4,
                            DeptName = "OS"
                        });
                });

            modelBuilder.Entity("ITI.EF.DAL.Models.Instructor", b =>
                {
                    b.Property<int>("Ins_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Ins_Id"));

                    b.Property<string>("Ins_Degree")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ins_Name")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Ins_Id");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("ITI.EF.DAL.Models.InstructorCourse", b =>
                {
                    b.Property<int>("Ins_Id")
                        .HasColumnType("int");

                    b.Property<int>("Crs_Id")
                        .HasColumnType("int");

                    b.Property<string>("Evaluation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Ins_Id", "Crs_Id");

                    b.HasIndex("Crs_Id");

                    b.ToTable("InstructorCourses");
                });

            modelBuilder.Entity("ITI.EF.DAL.Models.Student", b =>
                {
                    b.Property<int>("St_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("St_Id"));

                    b.Property<int>("DeptId")
                        .HasColumnType("int");

                    b.Property<string>("St_Address")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("St_Age")
                        .HasColumnType("int");

                    b.Property<string>("St_Fname")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("St_Lname")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("SuperId")
                        .HasColumnType("int");

                    b.HasKey("St_Id");

                    b.HasIndex("DeptId");

                    b.HasIndex("SuperId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("ITI.EF.DAL.Models.StudentCourse", b =>
                {
                    b.Property<int>("St_Id")
                        .HasColumnType("int");

                    b.Property<int>("Crs_Id")
                        .HasColumnType("int");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.HasKey("St_Id", "Crs_Id");

                    b.HasIndex("Crs_Id");

                    b.ToTable("StudentCourses");
                });

            modelBuilder.Entity("ITI.EF.DAL.Models.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TopicName = "Programming"
                        },
                        new
                        {
                            Id = 2,
                            TopicName = "Security"
                        });
                });

            modelBuilder.Entity("ITI.EF.DAL.Models.Course", b =>
                {
                    b.HasOne("ITI.EF.DAL.Models.Topic", "Topic")
                        .WithMany("Courses")
                        .HasForeignKey("TopicId");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("ITI.EF.DAL.Models.Department", b =>
                {
                    b.HasOne("ITI.EF.DAL.Models.Instructor", "Instructor")
                        .WithOne("ManageDepartment")
                        .HasForeignKey("ITI.EF.DAL.Models.Department", "ManagerId");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("ITI.EF.DAL.Models.InstructorCourse", b =>
                {
                    b.HasOne("ITI.EF.DAL.Models.Course", "Course")
                        .WithMany("CourseInstructors")
                        .HasForeignKey("Crs_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITI.EF.DAL.Models.Instructor", "Instructor")
                        .WithMany("InstructorCourses")
                        .HasForeignKey("Ins_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("ITI.EF.DAL.Models.Student", b =>
                {
                    b.HasOne("ITI.EF.DAL.Models.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DeptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITI.EF.DAL.Models.Student", "St_Super")
                        .WithMany("SupervisedStudents")
                        .HasForeignKey("SuperId");

                    b.Navigation("Department");

                    b.Navigation("St_Super");
                });

            modelBuilder.Entity("ITI.EF.DAL.Models.StudentCourse", b =>
                {
                    b.HasOne("ITI.EF.DAL.Models.Course", "Course")
                        .WithMany("CourseStudents")
                        .HasForeignKey("Crs_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITI.EF.DAL.Models.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("St_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ITI.EF.DAL.Models.Course", b =>
                {
                    b.Navigation("CourseInstructors");

                    b.Navigation("CourseStudents");
                });

            modelBuilder.Entity("ITI.EF.DAL.Models.Department", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("ITI.EF.DAL.Models.Instructor", b =>
                {
                    b.Navigation("InstructorCourses");

                    b.Navigation("ManageDepartment")
                        .IsRequired();
                });

            modelBuilder.Entity("ITI.EF.DAL.Models.Student", b =>
                {
                    b.Navigation("StudentCourses");

                    b.Navigation("SupervisedStudents");
                });

            modelBuilder.Entity("ITI.EF.DAL.Models.Topic", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
